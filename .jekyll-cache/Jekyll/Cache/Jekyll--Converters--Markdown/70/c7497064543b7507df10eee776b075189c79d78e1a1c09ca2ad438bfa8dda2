I"\<h2 id="题目">题目</h2>

<p>Final Project, Selected topics (not limited to):</p>

<ol>
  <li>Parallel Monte Carlo algorithm;</li>
  <li>Parallellinearsolver;</li>
  <li>Parallel QR factorization or linear least squares;</li>
  <li>Parallelbenchmarks;</li>
  <li>Dynamicloadbalancing;</li>
  <li>Parallel sorting or selection;</li>
  <li>Parallelgraphpartitioning;</li>
</ol>

<p>Implement with MPI or MapReduce or OpenMP or CUDA …</p>

<h2 id="说明">说明</h2>

<p>使用OpenMP实现了并行版本的快速傅里叶变换，并与串行版本的傅里叶变换结果作比较，验证其正确性并对比运行时间。</p>

<h3 id="分析">分析</h3>

<p>傅里叶变换常用于加速多项式乘法，而常规的快速傅里叶变换（原理略）通常是使用递归实现的，使用并行优化的难度比较高。因此，我在这里实现了非迭代的快速傅里叶版本：先预处理每个位置上元素变换后的位置（每个位置分治后的最终位置为其二进制翻转后得到的位置），然后先将所有元素移到变换后的位置之后直接循环合并。</p>

<blockquote>
  <p>找变换位置这里其实有一个经典算法叫雷德算法，又被称作蝴蝶变换；不过我没有使用这一算法，因为蝴蝶变换有一定的循环依赖性，很难并行优化。</p>
</blockquote>

<p>随后，调整完循环顺序之后，第一层循环变量i表示每一层变换的跨度，第二层循环变量j表示每一层变换的第一个起点，第三层循环遍历k则表示实际变换的位置$k$和$k+i$。在这里，从第二层开始是没有循环依赖的，即对于不同的j，算法不会对同一块地址进行访问（因为访问的下标$k\equiv j\pmod{i}$且$k+i\equiv j\pmod{i}$）。</p>

<p>作为公平起见，用于对比的串行版本快速傅里叶变换是直接在并行版本上删去编译推导<code>#pragma omp for</code>得到的。这是因为递归版本的快速傅里叶变换通常有较大的函数递归开销。</p>

<h3 id="编译">编译</h3>

<pre><code class="language-bash">g++ ParallelFastFourierTransform.cpp -oParallelFastFourierTransform -fopenmp
</code></pre>

<h3 id="运行">运行</h3>

<p>接受两个运行参数，第一个参数是并行部分使用的线程数量，第二个参数是傅里叶变换的长度的指数（例如，当设为10的时候，傅里叶变换的长度就是$2^{10}=1024$；这样做是因为算法本身就要求长度为二的幂次）。</p>

<p>考虑到变换的长度可能很长，我这里直接使用程序自己生成的序列进行变换了（这个程序仅用于验证算法的正确性）。</p>

<pre><code class="language-bash">./ParallelFastFourierTransform &lt;num-of-threads&gt; &lt;power-of-transform-length&gt;
</code></pre>

<h3 id="结果">结果</h3>

<p>我的软硬件配置是：</p>

<ul>
  <li>VAIO Z Flip 2016</li>
  <li>Intel(R) Core(TM) i7-6567U CPU @3.30GHZ 3.31GHz</li>
  <li>8.00GB RAM</li>
  <li>Windows 10.0.18362.175, 64-bit</li>
  <li>Windows Subsystem for Linux [Ubuntu 18.04.2 LTS]：WSL是以软件的形式运行在Windows下的Linux子系统，是近些年微软推出来的新工具，可以在Windows系统上原生运行Linux。</li>
  <li>gcc version 7.3.0 (Ubuntu 7.3.0-27ubuntu1~18.04)：C语言程序编译器，Ubuntu自带。</li>
</ul>

<pre><code class="language-bash">$ ./ParallelFastFourierTransform 1 22
Serial Time: 4.29194s
Parallel Time: 4.32889s
$ ./ParallelFastFourierTransform 2 22
Serial Time: 4.30011s
Parallel Time: 2.9339s
$ ./ParallelFastFourierTransform 4 22
Serial Time: 4.26301s
Parallel Time: 1.87973s
$ ./ParallelFastFourierTransform 8 22
Serial Time: 4.27979s
Parallel Time: 1.89624s
</code></pre>

<p>可以看到，由于我的机器是双核心四线程，在四线程并行加速时得到了最优的加速比。四线程并行优化的傅里叶变换比串行版本快了约56%.</p>

<h3 id="源代码">源代码</h3>

<pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;
#include &lt;omp.h&gt;
using namespace std;
typedef long long ll;
typedef double lf;
struct Rader : vector&lt;int&gt;
{
	Rader(int n) : vector&lt;int&gt;(1 &lt;&lt; int(ceil(log2(n))))
	{
		for (int i = at(0) = 0; i &lt; size(); ++i)
			if (at(i) = at(i &gt;&gt; 1) &gt;&gt; 1, i &amp; 1)
				at(i) += size() &gt;&gt; 1;
	}
};
struct FFT : Rader
{
	vector&lt;complex&lt;lf&gt;&gt; w;
	FFT(int n) : Rader(n), w(size(), polar(1.0, 2 * M_PI / size()))
	{
		w[0] = 1;
		for (int i = 1; i &lt; size(); ++i)
			w[i] *= w[i - 1];
	}
	vector&lt;complex&lt;lf&gt;&gt; pfft(const vector&lt;complex&lt;lf&gt;&gt; &amp;a) const
	{
		vector&lt;complex&lt;lf&gt;&gt; x(size());
#pragma omp parallel for
		for (int i = 0; i &lt; a.size(); ++i)
			x[at(i)] = a[i];
		for (int i = 1; i &lt; size(); i &lt;&lt;= 1)
#pragma omp parallel for
			for (int j = 0; j &lt; i; ++j)
				for (int k = j; k &lt; size(); k += i &lt;&lt; 1)
				{
					complex&lt;lf&gt; t = w[size() / (i &lt;&lt; 1) * j] * x[k + i];
					x[k + i] = x[k] - t, x[k] += t;
				}
		return x;
	}
	vector&lt;complex&lt;lf&gt;&gt; fft(const vector&lt;complex&lt;lf&gt;&gt; &amp;a) const
	{
		vector&lt;complex&lt;lf&gt;&gt; x(size());
		for (int i = 0; i &lt; a.size(); ++i)
			x[at(i)] = a[i];
		for (int i = 1; i &lt; size(); i &lt;&lt;= 1)
			for (int j = 0; j &lt; i; ++j)
				for (int k = j; k &lt; size(); k += i &lt;&lt; 1)
				{
					complex&lt;lf&gt; t = w[size() / (i &lt;&lt; 1) * j] * x[k + i];
					x[k + i] = x[k] - t, x[k] += t;
				}
		return x;
	}
	vector&lt;ll&gt; ask(const vector&lt;ll&gt; &amp;a, const vector&lt;ll&gt; &amp;b) const
	{
		vector&lt;complex&lt;lf&gt;&gt; xa(a.begin(), a.end()), xb(b.begin(), b.end());
		xa = fft(xa), xb = fft(xb);
		for (int i = 0; i &lt; size(); ++i)
			xa[i] *= xb[i];
		vector&lt;ll&gt; ans(size());
		xa = fft(xa), ans[0] = xa[0].real() / size() + 0.5;
		for (int i = 1; i &lt; size(); ++i)
			ans[i] = xa[size() - i].real() / size() + 0.5;
		return ans;
	}
};
int main(int argc, char **argv)
{
	if (argc &lt; 3)
		return cerr &lt;&lt; "Error: No Enough parameters (" &lt;&lt; argv[0] &lt;&lt; " &lt;num-of-threads&gt; &lt;power-of-transform-length&gt;).\n", 0;
	omp_set_num_threads(atoi(argv[1]));
	FFT fft(1 &lt;&lt; atoi(argv[2]));
	vector&lt;complex&lt;lf&gt;&gt; a(fft.begin(), fft.end());
	double t0 = omp_get_wtime();
	vector&lt;complex&lt;lf&gt;&gt; b = fft.fft(a);
	double t1 = omp_get_wtime();
	cout &lt;&lt; "Serial Time: " &lt;&lt; t1 - t0 &lt;&lt; "s\n";
	vector&lt;complex&lt;lf&gt;&gt; c = fft.pfft(a);
	double t2 = omp_get_wtime();
	cout &lt;&lt; "Parallel Time: " &lt;&lt; t2 - t1 &lt;&lt; "s\n";
	if (b != c)
		cerr &lt;&lt; "Error: Parallel result are not equivalent to Serial result.\n";
}
</code></pre>
:ET