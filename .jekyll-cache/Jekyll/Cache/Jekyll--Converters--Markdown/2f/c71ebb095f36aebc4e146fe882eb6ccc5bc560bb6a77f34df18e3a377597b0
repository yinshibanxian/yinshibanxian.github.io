I"_
<h1 id="edit-distance"><a href="https://vjudge.net/problem/Gym-102001A">Edit Distance</a></h1>
<pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;
using namespace std;
string s;
int cnt;
int main()
{
	cin &gt;&gt; s;
	for (auto c : s)
		cnt += c == '0' ? 1 : -1;
	if (cnt)
		cout &lt;&lt; string(s.size(), cnt &lt; 0 ? '0' : '1');
	else
		cout &lt;&lt; (s[0] == '0' ? "1" : "0") + string(s.size() - 1, s[0]);
}
</code></pre>
<h1 id="icy-land"><a href="https://vjudge.net/problem/Gym-102001D">Icy Land</a></h1>
<pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;
using namespace std;
char s[511][511];
int n, m, ans;
int main()
{
	scanf("%d%d", &amp;n, &amp;m);
	for (int i = 1; i &lt;= n; ++i)
		scanf("%s", s[i] + 1);
	if (n &gt; m)
	{
		for (int i = 1; i &lt;= n || i &lt;= m; ++i)
			for (int j = 1; j &lt; i; ++j)
				swap(s[i][j], s[j][i]);
		swap(n, m);
	}
	if (n == 1)
	{
		for (int i = 2; i &lt; m; ++i)
			if (s[1][i] == '.')
				++ans;
	}
	else if (n == 2)
	{
		for (int i = 2; i &lt; m; ++i)
			if (s[1][i] == '.' &amp;&amp; s[2][i] == '.')
				++ans;
	}
	else
	{
		for (int i = 2; i &lt; n; ++i)
			for (int j = 2; j &lt; m; ++j)
				if (s[i][j] == '.')
					++ans;
		bool p = 1;
		for (int i = 2; i &lt; n; ++i)
			if (s[i][1] == '#' || s[i][m] == '#')
				p = 0;
		for (int i = 2; i &lt; m; ++i)
			if (s[1][i] == '#' || s[n][i] == '#')
				p = 0;
		if (p)
			++ans;
	}
	printf("%d", ans);
}
</code></pre>
<h1 id="popping-balloons"><a href="https://vjudge.net/problem/Gym-102001F">Popping Balloons</a></h1>
<pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;
using namespace std;
typedef long long ll;
const ll N = 1e5 + 7;
ll n, m, a[N], b[N], s[N];
int main()
{
	scanf("%lld%lld", &amp;n, &amp;m);
	for (ll i = 1; i &lt;= n; ++i)
		scanf("%lld", &amp;a[i]);
	for (ll i = 1; i &lt;= n; ++i)
		scanf("%lld", &amp;b[i]), s[i] = s[i - 1] + b[i];
	vector&lt;ll&gt; v;
	for (ll i = 1,sum=0; i &lt;= n; ++i)
	{
		if (sum + a[i] &lt;= m)
			v.push_back(sum += a[i]);
		else
			break;
	}
	ll rs = 0;
	priority_queue&lt;pair&lt;ll, ll&gt;&gt; q;
	for (ll i = 1; i &lt;= v.size(); ++i)
		q.push(make_pair(b[i], -s[i]));
	vector&lt;ll&gt; ans;
	for (ll i = 0; i &lt; v.size(); ++i)
	{
		while (!q.empty() &amp;&amp; -q.top().second &lt; v[i] - rs)
			q.pop();
		if (q.empty())
			break;
		if (rs - q.top().second &lt;= m)
			ans.push_back(rs - q.top().second);
		rs += q.top().first;
	}
	if (q.empty() || rs + s[v.size()] &lt;= m)
		return printf("-1"), 0;
	printf("%d\n", ans.size());
	for (auto an : ans)
		printf("%lld ", an);
}
</code></pre>
<h1 id="go-make-it-complete"><a href="https://vjudge.net/problem/Gym-102001G">Go Make It Complete</a></h1>
<p>二分+贪心大暴力居然苟过去了…</p>
<pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;
using namespace std;
const int N = 511;
int n, m, g[N][N], dd[N], d[N];
struct Node
{
	int a, b;
	bool operator&lt;(const Node &amp;rhs) const
	{
		return d[a] + d[b] &lt; d[rhs.a] + d[rhs.b];
	}
};
vector&lt;Node&gt; qq;
int ok(int k)
{
	copy(dd, dd + n + 1, d);
	for (vector&lt;Node&gt; q(qq); !q.empty(); q.pop_back())
	{
		if (d[q.back().a] + d[q.back().b] &lt; k)
			sort(q.begin(), q.end());
		if (d[q.back().a] + d[q.back().b] &lt; k)
			return 0;
		++d[q.back().a], ++d[q.back().b];
	}
	return 1;
}
int bs(int b, int e)
{
	if (e - b &lt; 2)
		return b;
	int k = b + e &gt;&gt; 1;
	return ok(k) ? bs(k, e) : bs(b, k);
}
int main()
{
	scanf("%d%d", &amp;n, &amp;m);
	for (int i = 0, a, b; i &lt; m; ++i)
		scanf("%d%d", &amp;a, &amp;b), g[a][b] = g[b][a] = 1, ++dd[a], ++dd[b];
	for (int i = 1; i &lt;= n; ++i)
		for (int j = i + 1; j &lt;= n; ++j)
			if (!g[i][j])
				qq.push_back({i, j});
	cout &lt;&lt; bs(0, n * (n - 1) / 2 + 1);
}
</code></pre>
<h1 id="lexical-sign-sequence"><a href="https://vjudge.net/problem/Gym-102001H">Lexical Sign Sequence</a></h1>
<pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;
using namespace std;
typedef int ll;
const int N = 1e5 + 7;
struct Fenwick
{
	vector&lt;ll&gt; v;
	Fenwick(int last) : v(last + 1, 0) {}
	void add(int x, ll w)
	{
		for (; x &lt; v.size(); x += x &amp; -x)
			v[x] += w;
	}
	ll ask(int x)
	{
		ll ans = 0;
		for (; x; x -= x &amp; -x)
			ans += v[x];
		return ans;
	}
} T(N);
struct Seg
{
	int l, r, c;
	bool operator&lt;(const Seg &amp;rhs) const
	{
		return r &lt; rhs.r;
	}
} p[N];
int n, k, a[N];
int main()
{
	scanf("%d %d", &amp;n, &amp;k);
	for (int i = 1; i &lt;= n; i++)
		scanf("%d", &amp;a[i]);
	for (int i = 1; i &lt;= k; i++)
		scanf("%d%d%d", &amp;p[i].l, &amp;p[i].r, &amp;p[i].c);
	sort(p + 1, p + k + 1);
	stack&lt;int&gt; zero;
	for (int i = 1, cur = 1; i &lt;= n; i++)
	{
		if (a[i] == 0)
		{
			a[i] = -1;
			zero.push(i);
		}
		T.add(i, a[i]);
		while (p[cur].r &lt; i &amp;&amp; cur &lt;= k)
			++cur;
		while (cur &lt;= k &amp;&amp; p[cur].r == i)
		{
			int tmp = T.ask(p[cur].r) - T.ask(p[cur].l - 1);
			for (; tmp &lt; p[cur].c &amp;&amp; !zero.empty(); tmp += 2)
			{
				a[zero.top()] = 1;
				T.add(zero.top(), 2);
				zero.pop();
			}
			if (tmp &lt; p[cur].c)
				return ptintf("Impossible"), 0;
			++cur;
		}
	}
	for (int i = 1; i &lt;= n; i++)
		printf("%d ", a[i]);
}
</code></pre>
<h1 id="lie-detector"><a href="https://vjudge.net/problem/Gym-102001I">Lie Detector</a></h1>
<pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;
using namespace std;
char s[127];
int n, ans;
int main()
{
	scanf("%d", &amp;n);
	for (int i = 0; i &lt; n; ++i)
	{
		scanf("%s", s);
		ans ^= s[0] == 'L';
	}
	printf(ans ? "LIE" : "TRUTH");
}
</code></pre>
<h1 id="future-generation"><a href="https://vjudge.net/problem/Gym-102001J">Future Generation</a></h1>
<pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;
using namespace std;
const int N = 5e6 + 7, M = 17, INF = 1e9 + 7;
struct Node
{
	char s[M];
	int id;
	bool operator&lt;(const Node &amp;rhs) const
	{
		int t = strcmp(s, rhs.s);
		return t ? t &lt; 0 : id &gt; rhs.id;
	}
} v[N];
char s[M], t[M];
int n, vs, sum[M];
void dfs(int k, int len, int id)
{
	if (!s[k])
	{
		if (len)
		{
			copy(t, t + len, v[vs].s);
			v[vs++].id = id;
		}
		return;
	}
	dfs(k + 1, len, id);
	t[len] = s[k];
	dfs(k + 1, len + 1, id);
}
int main()
{
	scanf("%d", &amp;n);
	for (int i = 1; i &lt;= n; ++i)
	{
		scanf("%s", s);
		dfs(0, 0, i);
	}
	fill(sum + 1, sum + n + 1, -INF);
	sort(v, v + vs);
	for (int i = 0; i &lt; vs; ++i)
		sum[v[i].id] = max(sum[v[i].id], sum[v[i].id - 1] + int(strlen(v[i].s)));
	printf("%d", max(-1, sum[n]));
}
</code></pre>
<h1 id="binary-string"><a href="https://vjudge.net/problem/Gym-102001L">Binary String</a></h1>
<pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;
using namespace std;
bool cmp(const string &amp;a, const string &amp;b)
{
	if (a.size() != b.size())
		return a.size() &lt; b.size();
	for (int i = a.size() - 1; ~i; --i)
		if (a[i] != b[i])
			return a[i] &lt; b[i];
	return 0;
}
int main()
{
	long long k;
	string s, t;
	for (cin &gt;&gt; k &gt;&gt; s; k; k &gt;&gt;= 1)
		t.push_back('0' + k % 2);
	reverse(s.begin(), s.end());
	for (int i = k = 0; cmp(t, s); ++k)
	{
		for (i = s.size() - 2; i &gt;= 0; --i)
			if (s[i] == '1')
			{
				s.erase(i, 1);
				break;
			}
		if (i &lt; 0)
			s.erase(0, 1);
	}
	cout &lt;&lt; k;
}
</code></pre>
:ET