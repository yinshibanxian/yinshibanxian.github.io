I"m	<h4 id="一题目描述">一、题目描述</h4>

<p>写一个函数，输入 n ，求斐波那契（Fibonacci）数列的第 n 项。斐波那契数列的定义如下：</p>

<pre><code>F(0) = 0,   F(1) = 1
F(N) = F(N - 1) + F(N - 2), 其中 N &gt; 1.
</code></pre>
<p>斐波那契数列由 0 和 1 开始，之后的斐波那契数就是由之前的两数相加而得出。</p>

<p>答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。</p>

<p><strong>示例1</strong></p>

<pre><code>输入：n = 2
输出：1
</code></pre>

<p><strong>示例2</strong></p>

<pre><code>输入：n = 5
输出：5
</code></pre>

<p><strong>提示</strong></p>

<pre><code>0 &lt;= n &lt;= 100
</code></pre>

<h4 id="二题目解析">二、题目解析</h4>

<ol>
  <li>
    <p>递归法</p>

    <p>如果没有时间上的限制，斐波那契的一般解决方法是递归的方法。</p>

    <pre><code> /**
 * @param {number} n
 * @return {number}
 */
 var fib = function(n) {
     if(n &lt; 2) return n;
     return fib(n-1)  + fib(n-2);
 };
</code></pre>

    <p>但是这种方法会有大量重复的计算，导致超出leetcode的时间限制</p>
  </li>
  <li>
    <p>记忆递归法</p>

    <p>上面说到，未经优化的递归法会进行大量重复的计算，以fibonacci(5)为例</p>

    <p>fibonacci(5) = fibonacci(4) + fibonacci(3);
 fibonacci(4) = fibonacci(3) + fibonacci(2);</p>

    <p>可以看到，重复计算了fibonacci(3)两次。</p>

    <p>为了减少这种重复计算，我们可以将计算过的结果保存起来，确保不会进行重复的计算。</p>

    <pre><code> /**
 * @param {number} n
 * @return {number}
 */
 var fib = function(n) {
     const memo = [0,1];
     const fibonacci = function(n) {
         if(memo[n] != null) {
             return memo[n] % 1000000007;
         }
         return memo[n] = (fibonacci(n-1) + fibonacci(n-2)) % 1000000007;
     }
     return fibonacci(n);
 };
</code></pre>
  </li>
  <li>
    <p>动态规划法</p>

    <p>从</p>
  </li>
</ol>

<pre><code>/**
 * @param {number} n
 * @return {number}
 */
var fib = function(n) {
    const dp = [0,1];
    for(let i = 2;i &lt;= n;i ++) {
        dp[i] = (dp[i-1] + dp[i-2]) % 1000000007;
    }
    return dp[n];
};
</code></pre>

<p>来源：力扣（LeetCode）</p>

<p>链接：https://leetcode-cn.com/problems/fei-bo-na-qi-shu-lie-lcof</p>
:ET