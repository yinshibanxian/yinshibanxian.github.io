I"/<h2 id="task">Task</h2>

<ul>
  <li>Please solve the maze problem (i.e., find the shortest path from the start point to the finish point) by using BFS or DFS (Python or C++)</li>
  <li>The maze layout can be modeled as an array, and you can use the data file <code>MazeData.txt</code> if necessary.</li>
</ul>

<h3 id="mazedatatxt">MazeData.txt</h3>

<pre><code class="language-bash">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                 S%
% %%%%%%%%%%%%%%%%%%%%%%% %%%%%%%% %
% %%   %   %      %%%%%%%   %%     %
% %% % % % % %%%% %%%%%%%%% %% %%%%%
% %% % % % %             %% %%     %
% %% % % % % % %%%%  %%%    %%%%%% %
% %  % % %   %    %% %%%%%%%%      %
% %% % % %%%%%%%% %%        %% %%%%%
% %% %   %%       %%%%%%%%% %%     %
%    %%%%%% %%%%%%%      %% %%%%%% %
%%%%%%      %       %%%% %% %      %
%      %%%%%% %%%%% %    %% %% %%%%%
% %%%%%%      %       %%%%% %%     %
%        %%%%%% %%%%%%%%%%% %%  %% %
%%%%%%%%%%                  %%%%%% %
%E         %%%%%%%%%%%%%%%%        %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
</code></pre>

<h2 id="codes">Codes</h2>

<pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;
using namespace std;
int main()
{
	ifstream fin("MazeData.txt");
	typedef pair&lt;int, int&gt; Coord;
	const int NPOS = -1;
#define X first
#define Y second
	vector&lt;string&gt; map;
	vector&lt;vector&lt;Coord&gt;&gt; pre;
	Coord st, ed;
	for (string s; getline(fin, s) &amp;&amp; !s.empty();)
	{
		map.push_back(s);
		pre.push_back(vector&lt;Coord&gt;(s.size(), {NPOS, NPOS}));
		for (int i = map.size() - 1, j = 0; j &lt; map[i].size(); ++j)
		{
			if (map[i][j] == 'S')
				st = {i, j};
			if (map[i][j] == 'E')
				ed = {i, j};
		}
	}
	for (deque&lt;Coord&gt; q(1, st); !q.empty() &amp;&amp; pre[ed.X][ed.Y].X == NPOS; q.pop_front())
		for (Coord nex : vector&lt;Coord&gt;{
				 {q.front().X + 1, q.front().Y},
				 {q.front().X - 1, q.front().Y},
				 {q.front().X, q.front().Y + 1},
				 {q.front().X, q.front().Y - 1},
			 })
			if (0 &lt;= nex.X &amp;&amp; nex.X &lt; map.size())
				if (0 &lt;= nex.Y &amp;&amp; nex.Y &lt; map[nex.X].size())
					if (map[nex.X][nex.Y] == ' ' || map[nex.X][nex.Y] == 'E')
						if (pre[nex.X][nex.Y].X == NPOS)
						{
							q.push_back(nex);
							pre[nex.X][nex.Y] = q.front();
						}
	if (pre[ed.X][ed.Y].X == NPOS)
		return cout &lt;&lt; "No Solution.", 0;
	for (ed = pre[ed.X][ed.Y]; pre[ed.X][ed.Y].X != NPOS; ed = pre[ed.X][ed.Y])
		map[ed.X][ed.Y] = 'X';
	for (const auto &amp;s : map)
		cout &lt;&lt; s &lt;&lt; '\n';
}
</code></pre>

<h2 id="results">Results</h2>

<pre><code class="language-bash">g++ maze.cpp -o maze.out
</code></pre>

<pre><code class="language-bash">$ ./maze.out
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                        XXXXXXXXXS%
% %%%%%%%%%%%%%%%%%%%%%%%X%%%%%%%% %
% %%   %   %      %%%%%%%XXX%%     %
% %% % % % % %%%% %%%%%%%%%X%% %%%%%
% %% % % % %        XXXXX%%X%%     %
% %% % % % % % %%%% X%%%XXXX%%%%%% %
% %  % % %   %    %%X%%%%%%%%      %
% %% % % %%%%%%%% %%XXXXXXXX%% %%%%%
% %% %   %%       %%%%%%%%%X%%     %
%    %%%%%% %%%%%%%      %%X%%%%%% %
%%%%%%      %       %%%% %%X%      %
%      %%%%%% %%%%% %    %%X%% %%%%%
% %%%%%%      %       %%%%%X%%     %
%        %%%%%% %%%%%%%%%%%X%%  %% %
%%%%%%%%%%XXXXXXXXXXXXXXXXXX%%%%%% %
%EXXXXXXXXX%%%%%%%%%%%%%%%%        %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
</code></pre>
:ET