I":<h4 id="一题目描述">一、题目描述</h4>

<p>在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。</p>

<p>请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p>

<p><strong>示例</strong></p>

<p>现有矩阵 matrix 如下：</p>

<pre><code>[
  [1,   4,  7, 11, 15],
  [2,   5,  8, 12, 19],
  [3,   6,  9, 16, 22],
  [10, 13, 14, 17, 24],
  [18, 21, 23, 26, 30]
]
</code></pre>

<p>给定 target = <code>5</code>，返回 <code>true</code>。</p>

<p>给定 target = <code>20</code>，返回 <code>false</code>。</p>

<p><strong>限制</strong></p>

<pre><code>0 &lt;= n &lt;= 1000

0 &lt;= m &lt;= 1000
</code></pre>

<h4 id="二题目解析">二、题目解析</h4>

<ol>
  <li>
    <p>暴力法遍历</p>

    <p>对二维数组进行遍历，若找到目标值，则返回<code>true</code>，否则返回<code>false</code>。</p>

    <pre><code> /**
 * @param {number[][]} matrix
 * @param {number} target
 * @return {boolean}
 */
 var findNumberIn2DArray = function(matrix, target) {
     let targetFound = false;
     if(matrix == null || !matrix.length || !matrix[0].length) return targetFound;
     const columns = matrix[0].length;
     const rows = matrix.length;
     for(let i = 0;i &lt; rows;i ++) {
         for(let j = 0;j &lt; columns;j ++) {
             if(matrix[i][j] === target) {
                 targetFound = true;
                 return targetFound;
             }
         }
     }
     return targetFound;
 };
</code></pre>

    <ul>
      <li>时间复杂度: O(n^2)</li>
      <li>空间复杂度: O(1)</li>
    </ul>
  </li>
  <li>
    <p>线性遍历法</p>

    <p>从矩阵的右上角对矩阵进行遍历，如果<code>target</code>大于遍历到的当前元素，那么行数加1.
 如果<code>target</code>小于遍历到的当前元素，那么列数减1，如果<code>target</code>等于遍历到的当前
 元素，那么终止循环即可。</p>

    <p>如何确保这样的遍历方法会遍历到全部元素呢？根据给出矩阵的特点，从左到右是递增的，</p>

    <p>从上到下是递增的。我们从矩阵的右上角开始遍历，如果<code>target</code>小于遍历到的当前元素，</p>

    <p>那么说明当前元素下方的元素都大于target值，往下遍历不可能找到<code>target</code>值，因此要往</p>

    <p>左查找。反之如果<code>target</code>大于遍历到的当前元素，那么说明<code>target</code>大于当前元素左边的全部</p>

    <p>元素，往左查找不可能找到<code>target</code>值,因此只能往下查找。</p>

    <pre><code> /**
 * @param {number[][]} matrix
 * @param {number} target
 * @return {boolean}
 */
 var findNumberIn2DArray = function(matrix, target) {
     let targetFound = false;
     if(matrix == null || !matrix.length || !matrix[0].length) return targetFound;
     const columns = matrix[0].length;
     const rows = matrix.length;
     let currentRow = 0, currentColumn = columns - 1;
     while(currentColumn &gt;= 0 &amp;&amp; currentRow &lt; rows) {
         if(target &gt; matrix[currentRow][currentColumn]) {
             currentRow ++;
         } else if(target &lt; matrix[currentRow][currentColumn]) {
             currentColumn --;
         } else {
             targetFound = true;
             break;
         }
     }
     return targetFound;
 };
</code></pre>
  </li>
</ol>

<p>来源：力扣（LeetCode）</p>

<p>链接：https://leetcode-cn.com/problems/er-wei-shu-zu-zhong-de-cha-zhao-lcof</p>
:ET