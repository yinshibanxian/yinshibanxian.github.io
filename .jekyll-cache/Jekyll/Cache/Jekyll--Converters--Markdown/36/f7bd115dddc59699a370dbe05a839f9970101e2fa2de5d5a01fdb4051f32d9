I"l*<h2 id="bazinga"><a href="https://vjudge.net/problem/HDU-5510">Bazinga</a></h2>

<pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;
using namespace std;

const int maxn=500+10,maxL=2000+10;
int T,n,ans;
char ch[maxn][maxL];

struct KMP
{
	const string s;
	vector&lt;int&gt; next;
	KMP(const string &amp;s) : s(s), next(s.size() + 1, 0)
	{
		for (int i = 1, j; i &lt; s.size(); ++i)
		{
			for (j = next[i]; j &amp;&amp; s[i] != s[j];)
				j = next[j];
			next[i + 1] = s[i] == s[j] ? j + 1 : 0;
		}
	}
	bool find_in(const string &amp;t)const
	{
		for (int i = 0, j = 0; i &lt; t.size(); ++i)
		{
			while (j &amp;&amp; s[j] != t[i])
				j = next[j];
			if (s[j] == t[i])
				++j;
			if (j == s.size())
				return 1; //²»return¿ÉµÃµ½tÖÐsµÄËùÓÐÆ¥ÅäµØÖ·i+1-s.size()
		}
		return 0;
	}
};

int main()
{
	scanf("%d",&amp;T);
	for (int t=1;t&lt;=T;t++)
	{
		scanf("%d",&amp;n);
		for (int i=1;i&lt;=n;i++) scanf("%s",ch[i]);

		int L=0,R=0;
		for (int i=n;i&gt;=2;i--) if (!KMP(ch[i-1]).find_in(ch[i])) {R=i;break;}
		if (R==0) {printf("Case #%d: -1\n",t);continue;}
		ans=R;

		L=R;R++;
		while (R&lt;=n)
		{
			while (L&gt;0 &amp;&amp; KMP(ch[L]).find_in(ch[R])) L--;
			if (L&lt;=0) break;
			R++;
		}
		ans=max(ans,R-1);

		printf("Case #%d: %d\n",t,ans);
	}

	return 0;
}
</code></pre>

<h2 id="pagodas"><a href="https://vjudge.net/problem/HDU-5512">Pagodas</a></h2>

<pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;
using namespace std;
int t, n, a, b;
int main()
{
	scanf("%d", &amp;t);
	for (int i = 1; i &lt;= t; i++)
	{
		scanf("%d%d%d", &amp;n, &amp;a, &amp;b);
		cout &lt;&lt; "Case #" &lt;&lt; i &lt;&lt; ": " &lt;&lt; (n / (__gcd(a, b)) % 2 ? "Yuwgna" : "Iaka") &lt;&lt; endl;
	}
}
</code></pre>

<h2 id="triple"><a href="https://vjudge.net/problem/HDU-5517">Triple</a></h2>

<p>三维偏序，使用二维树状数组维护。</p>

<pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;
using namespace std;
typedef long long ll;
struct Fenwick
{
	struct BaseFenwick
	{
		vector&lt;ll&gt; v;
		BaseFenwick(int n) : v(n, 0) {}
		void add(int x, ll w)
		{
			for (; x &lt; v.size(); x += x &amp; -x)
				v[x] += w;
		}
		ll ask(int x)
		{
			ll ans = 0;
			for (; x; x -= x &amp; -x)
				ans += v[x];
			return ans;
		}
	};
	pair&lt;BaseFenwick, BaseFenwick&gt; p;
	Fenwick(int n) : p(n, n) {}
	void add(int x, ll w) { p.first.add(x, w), p.second.add(x, x * w); }
	void add(int l, int r, ll w) { add(l, w), add(r + 1, -w); }
	ll ask(int x) { return (x + 1) * p.first.ask(x) - p.second.ask(x); }
	ll ask(int l, int r) { return ask(r) - ask(l - 1); }
};
struct Fenwick2
{
	struct BaseFenwick2
	{
		vector&lt;Fenwick&gt; v;
		BaseFenwick2(int r, int c) : v(r, c) {}
		void add(int x, int b, int t, ll w)
		{
			for (; x &lt; v.size(); x += x &amp; -x)
				v[x].add(b, t, w);
		}
		ll ask(int x, int b, int t)
		{
			ll ans = 0;
			for (; x; x -= x &amp; -x)
				ans += v[x].ask(b, t);
			return ans;
		}
	};
	pair&lt;BaseFenwick2, BaseFenwick2&gt; p;
	Fenwick2(int r, int c) : p(BaseFenwick2(r, c), BaseFenwick2(r, c)) {}
	void add(int x, int b, int t, ll w) { p.first.add(x, b, t, w), p.second.add(x, b, t, x * w); }
	void add(int l, int b, int r, int t, ll w) { add(l, b, t, w), add(r + 1, b, t, -w); } //(l,b)~(r,t)
	ll ask(int x, int b, int t) { return (x + 1) * p.first.ask(x, b, t) - p.second.ask(x, b, t); }
	ll ask(int l, int b, int r, int t) { return ask(r, b, t) - ask(l - 1, b, t); }
};
const int M = 1e5 + 9;
int t, n, m, kase;
int main()
{
	for (scanf("%d", &amp;t); t--;)
	{
		vector&lt;tuple&lt;int, int&gt;&gt; a(M);
		vector&lt;tuple&lt;int, int, int, int&gt;&gt; p;
		scanf("%d%d", &amp;n, &amp;m);
		for (int i = 0, x, y; i &lt; n; ++i)
		{
			scanf("%d%d", &amp;x, &amp;y);
			if (get&lt;0&gt;(a[y]) &lt; x)
				a[y] = make_tuple(x, 0);
			if (get&lt;0&gt;(a[y]) == x)
				++get&lt;1&gt;(a[y]);
		}
		for (int i = 0, c, d, e; i &lt; m; ++i)
		{
			scanf("%d%d%d", &amp;c, &amp;d, &amp;e);
			p.emplace_back(get&lt;0&gt;(a[e]), c, d, get&lt;1&gt;(a[e]));
		}
		sort(p.rbegin(), p.rend());
		for (int i = 1; i &lt; p.size(); ++i)
			if (get&lt;0&gt;(p[i - 1]) == get&lt;0&gt;(p[i]) &amp;&amp; get&lt;1&gt;(p[i - 1]) == get&lt;1&gt;(p[i]) &amp;&amp; get&lt;2&gt;(p[i - 1]) == get&lt;2&gt;(p[i]))
			{
				get&lt;3&gt;(p[i]) += get&lt;3&gt;(p[i - 1]);
				get&lt;3&gt;(p[i - 1]) = 0;
			}
		Fenwick2 f(1023, 1023);
		ll ans = 0;
		for (auto it : p)
			if (get&lt;3&gt;(it))
			{
				if (!f.ask(get&lt;1&gt;(it) + 5, get&lt;2&gt;(it) + 5, 1009, 1009))
					ans += get&lt;3&gt;(it);
				f.add(get&lt;1&gt;(it) + 5, get&lt;2&gt;(it) + 5, get&lt;1&gt;(it) + 5, get&lt;2&gt;(it) + 5, get&lt;3&gt;(it));
			}
		printf("Case #%d: %lld\n", ++kase, ans);
	}
}
</code></pre>

<h2 id="kykneion-asma"><a href="https://vjudge.net/problem/HDU-5521">Kykneion asma</a></h2>

<p>还是要学习一个，任意模数的FFT，不是费马素数的模数要用特殊的姿势去膜，不能无脑NTT。</p>

<pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;
using namespace std;
typedef long long ll;
typedef double lf;
#define X real()
#define Y imag()
#ifndef M_PI
const double M_PI = acos(-1);
#endif
struct Mod
{
	const ll M, SM;
	Mod(ll M) : M(M), SM(sqrt(M) + 0.5) {}
	ll qadd(ll &amp;a, ll b) const { return a += b, a &gt;= M ? a -= M : a; } //假如a+b&lt;2*M，就不必取模了，取模运算耗时很高
	ll add(ll a, ll b) const { return qadd(a = (a + b) % M, M); }	  //考虑a和b不在同余系内甚至为负数的情况
	ll mul(ll a, ll b) const { return add(a * b, M); }
};
struct Factorial : Mod
{
	vector&lt;ll&gt; fac, ifac;
	Factorial(int N, ll M) : fac(N, 1), ifac(N, 1), Mod(M)
	{
		for (int i = 2; i &lt; N; ++i)
			fac[i] = mul(fac[i - 1], i), ifac[i] = mul(M - M / i, ifac[M % i]);
		for (int i = 2; i &lt; N; ++i)
			ifac[i] = mul(ifac[i], ifac[i - 1]);
	}
} M(32767, 1e9 + 7);
struct Rader : vector&lt;int&gt;
{
	Rader(int n) : vector&lt;int&gt;(1 &lt;&lt; int(ceil(log2(n))))
	{
		for (int i = at(0) = 0; i &lt; size(); ++i)
			if (at(i) = at(i &gt;&gt; 1) &gt;&gt; 1, i &amp; 1)
				at(i) += size() &gt;&gt; 1;
	}
};
struct FFT : Rader
{
	vector&lt;complex&lt;lf&gt;&gt; w;
	FFT(int n) : Rader(n), w(size())
	{
		for (int i = 0; i &lt; size(); ++i)
			w[i] = polar(1.0, 2 * M_PI * i / size());
	}
	void fft(vector&lt;complex&lt;lf&gt;&gt; &amp;x) const
	{
		for (int i = 0; i &lt; x.size(); ++i)
			if (i &lt; at(i))
				std::swap(x[i], x[at(i)]);
		for (int i = 1; i &lt; size(); i &lt;&lt;= 1)
			for (int j = 0; j &lt; i; ++j)
				for (int k = j; k &lt; size(); k += i &lt;&lt; 1)
				{
					complex&lt;lf&gt; t = w[size() / (i &lt;&lt; 1) * j] * x[k + i];
					x[k + i] = x[k] - t, x[k] += t;
				}
	}
	vector&lt;ll&gt; ask(const vector&lt;ll&gt; &amp;a, const vector&lt;ll&gt; &amp;b) const
	{
		vector&lt;complex&lt;lf&gt;&gt; xa(a.begin(), a.end()), xb(b.begin(), b.end());
		xa.resize(size()), xb.resize(size()), fft(xa), fft(xb);
		for (int i = 0; i &lt; size(); ++i)
			xa[i] *= xb[i];
		fft(xa);
		vector&lt;ll&gt; ans(size());
		for (int i = 0; i &lt; size(); ++i)
			ans[i] = xa[(size() - i) &amp; (size() - 1)].real() / size() + 0.5;
		return ans;
	}
	vector&lt;ll&gt; askMod(const vector&lt;ll&gt; &amp;a, const vector&lt;ll&gt; &amp;b, ll M) const //任意模数
	{
		vector&lt;complex&lt;lf&gt;&gt; e(size()), c(size());
		for (int i = 0; i &lt; a.size(); ++i)
			e[i].real(a[i] &amp; 0x7fff), e[i].imag(a[i] &gt;&gt; 15);
		for (int i = 0; i &lt; b.size(); ++i)
			c[i].real(b[i] &amp; 0x7fff), c[i].imag(b[i] &gt;&gt; 15);
		fft(e), fft(c);
		vector&lt;complex&lt;lf&gt;&gt; d(c);
		for (int i = 0; i &lt; size(); ++i)
		{
			int fr = (size() - i) &amp; (size() - 1);
			c[i] *= 0.5 * complex&lt;lf&gt;(e[i].X + e[fr].X, e[i].Y - e[fr].Y);
			d[i] *= 0.5 * complex&lt;lf&gt;(e[i].Y + e[fr].Y, e[fr].X - e[i].X);
		}
		fft(c), fft(d);
		vector&lt;ll&gt; ans(size());
		for (int i = 0; i &lt; size(); ++i)
		{
			ll fr = (size() - i) &amp; (size() - 1),
			   p = c[fr].X / size() + 0.5,
			   o = c[fr].Y / size() + 0.5,
			   x = d[fr].X / size() + 0.5,
			   u = d[fr].Y / size() + 0.5;
			ans[i] = (p % M + ((o + x) % M &lt;&lt; 15) + (u % M &lt;&lt; 30)) % M;
		}
		return ans;
	}
};
int t, n, m, kase;
int main()
{
	for (scanf("%d", &amp;t); t--;)
	{
		scanf("%d", &amp;n);
		vector&lt;ll&gt; f(n + 1);
		f[0] = 1;
		for (int a = 0; a &lt; 5; ++a)
		{
			scanf("%d", &amp;m);
			for (int i = 0; i &lt;= n; ++i)
				if (n - i - (a == 0) &gt;= 0)
					f[i] = M.mul(f[i], M.fac[n - i - (a == 0)]);
			auto g = FFT(n + m + 2).askMod(f, vector&lt;ll&gt;(M.ifac.begin(), M.ifac.begin() + m + 1), M.M);
			for (int i = 0; i &lt;= n; ++i)
				if (n - i - (a == 0) &gt;= 0)
					f[i] = M.mul(g[i], M.ifac[n - i - (a == 0)]);
		}
		printf("Case #%d: %lld\n", ++kase, f[n]);
	}
}
</code></pre>

<h2 id="meeting"><a href="https://vjudge.net/problem/HDU-5521">Meeting</a></h2>

<pre><code class="language-cpp">#include &lt;bits/stdc++.h&gt;
using namespace std;
typedef long long ll;
const ll INF = 1e18;
struct Graph
{
	struct Vertex
	{
		vector&lt;int&gt; o;
	};
	struct Edge
	{
		int first, second;
		ll len; //?????,??????
	};
	vector&lt;Vertex&gt; v; //??
	vector&lt;Edge&gt; e;   //??
	Graph(int n) : v(n) {}
	void add(const Edge &amp;ed)
	{
		v[ed.first].o.push_back(e.size());
		e.push_back(ed);
	}
};
struct Dijkstra : Graph
{
	vector&lt;ll&gt; d;
	vector&lt;int&gt; p;
	Dijkstra(int n) : Graph(n) {}
	void ask(int s)
	{
		d.assign(v.size(), INF);
		//p.assign(v.size(), e.size());
		priority_queue&lt;pair&lt;ll, int&gt;&gt; q;
		for (q.push(make_pair(d[s] = 0, s)); !q.empty();)
		{
			ll dis = -q.top().first;
			int u = q.top().second;
			if (q.pop(), d[u] &lt; dis)
				continue;
			for (int i = 0, k, to; i != v[u].o.size(); ++i)
				if (k = v[u].o[i], to = e[k].second,
					d[to] &gt; d[u] + e[k].len)
				{
					d[to] = d[u] + e[k].len; //, p[to] = k;
					q.push(make_pair(-d[to], to));
				}
		}
	}
};
int t, n, m, kase;
int main()
{
	for (scanf("%d", &amp;t); t--;)
	{
		scanf("%d%d", &amp;n, &amp;m);
		Dijkstra g(n + m + 1);
		for (int i = 1, t, s; i &lt;= m; ++i)
		{
			scanf("%d%d", &amp;t, &amp;s);
			for (int j = 0, x; j &lt; s; ++j)
			{
				scanf("%d", &amp;x);
				g.add({x, n + i, t});
				g.add({n + i, x, t});
			}
		}
		g.ask(1);
		vector&lt;ll&gt; d;
		swap(d, g.d);
		g.ask(n);
		pair&lt;ll, vector&lt;int&gt;&gt; ans(INF, {});
		for (int i = 1; i &lt;= n; ++i)
		{
			ll tmp = max(d[i], g.d[i]);
			if (ans.first &gt; tmp)
				ans.first = tmp, ans.second.clear();
			if (ans.first == tmp)
				ans.second.push_back(i);
		}
		if (ans.first &lt; INF)
		{
			printf("Case #%d: %lld\n", ++kase, ans.first &gt;&gt; 1);
			for (int i = 0; i &lt; ans.second.size(); ++i)
				printf("%d%c", ans.second[i], "\n "[i + 1 &lt; ans.second.size()]);
		}
		else
			printf("Case #%d: Evil John\n", ++kase);
	}
}
</code></pre>
:ET