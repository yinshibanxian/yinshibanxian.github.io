I"!<p>第一次练习团队配合。五小时三人共做出ABCIK五题。配合有待加强。</p>
<h1 id="auxiliary-project"><a href="https://vjudge.net/problem/Gym-101612A">Auxiliary Project</a></h1>
<p>最开始是用DP做的。</p>
<pre><code class="language-cpp">#include&lt;fstream&gt;
using namespace std;
ifstream fin("auxiliary.in");
ofstream fout("auxiliary.out");
int work(int k)
{
	static int f[1000001]= {0},
		cost[10]= {6,2,5,5,4,5,6,3,7,6};
	if(k&lt;0)return 0;
	if(f[k])return f[k];
	for(int i=0; i!=10; ++i)
		if(work(k-cost[i])&gt;0||k==cost[i])
			f[k]=max(f[k],work(k-cost[i])+i);
	return f[k];
}
int main()
{
	int n;
	fin&gt;&gt;n;
	fout&lt;&lt;work(n);
}
</code></pre>
<p>其实这题可以贪心：尽量用性价比最高的7，多余的用4和1去补。</p>
<pre><code class="language-cpp">int work(int k)
{
	return k%3==1 ? k/3*7-3:
		   k%3==2 ? k/3*7+1:
					k/3*7;
}
</code></pre>
<h1 id="boolean-satisfability"><a href="https://vjudge.net/problem/Gym-101612B">Boolean Satisfability</a></h1>
<p>做的时候没注意每个标识符长度为1，导致代码长了很多。</p>
<pre><code class="language-cpp">#include&lt;fstream&gt;
#include&lt;string&gt;
#include&lt;set&gt;
using namespace std;
ifstream fin("boolean.in");
ofstream fout("boolean.out");
set&lt;string&gt; b[3];
bool flag=1,sign=0;
int main()
{
	for(string s,ss; getline(fin,s,'|');)
	{
		while(!isalpha(s.back()))
			s.pop_back();//不加这个有的样例过不掉
		sign=s[0]=='~';
		ss=s.substr(sign);
		b[sign].insert(ss);
		if(b[!sign].find(ss)
				!=b[!sign].end())
			flag=0;
	}
	b[2].insert(b[0].begin(),b[0].end());
	b[2].insert(b[1].begin(),b[1].end());
	fout&lt;&lt;(1LL&lt;&lt;b[2].size())-flag;
}
</code></pre>
<p>可以用bitset和位运算弄个大新闻。</p>
<pre><code class="language-cpp">#include&lt;fstream&gt;
#include&lt;bitset&gt;
using namespace std;
ifstream fin("boolean.in");
ofstream fout("boolean.out");
bitset&lt;'z'-'A'+1&gt; b[3];
bool flag=1,sign=0;
int main()
{
	for(char ch; fin&gt;&gt;ch;)
	{
		if(isalpha(ch))
		{
			b[sign][ch-'A']=1;
			if(b[!sign][ch-'A'])
				flag=0;
			sign=0;
		}
		if(ch=='~')sign=1;
	}
	b[2]=b[0]|b[1];
	fout&lt;&lt;(1LL&lt;&lt;b[2].count())-flag;
}
</code></pre>
<h1 id="consonant-fencity"><a href="https://vjudge.net/problem/Gym-101612C">Consonant Fencity</a></h1>
<p>暴力dfs。 <br />
算<code>consonant fencity</code>的时候应当边搜索边计算，如果等搜索到达终点再从头计算会TLE。</p>
<pre><code class="language-cpp">#include&lt;fstream&gt;
#include&lt;vector&gt;
using namespace std;
ifstream fin("consonant.in");
ofstream fout("consonant.out");
string s,con("bcdfghjklmnpqrstvxz");
vector&lt;vector&lt;int&gt; &gt; adjmap(con.size(),vector&lt;int&gt;(con.size(),0));
vector&lt;bool&gt; state(con.size(),0),ans_state(con.size(),0);
int v=0,ans_v=0;
void dfs(int k)
{
	if(k==con.size())
	{
		if(ans_v&lt;v)
		{
			ans_v=v;
			ans_state=state;
		}
		return;
	}
	dfs(k+1);
	state[k]=1;
	int t_v=v;
	for(int i=0; i!=con.size(); i++)
		if(i!=k)
			v+=(state[i]?-1:1)*adjmap[i][k];
	dfs(k+1);
	state[k]=0;
	v=t_v;
}
int main()
{
	fin&gt;&gt;s;
	for(int i=1,p=con.find(s[0]),q; i!=s.size(); ++i,p=q)
	{
		q=con.find(s[i]);
		if(p!=con.npos&amp;&amp;q!=con.npos)
		{
			++adjmap[p][q];
			++adjmap[q][p];
		}
	}
	dfs(0);
	for(int i=0,p; i!=s.size(); ++i)
	{
		p=con.find(s[i]);
		fout&lt;&lt;char(p!=con.npos&amp;&amp;ans_state[p]?
				   toupper(s[i]):s[i]);
	}
}
</code></pre>
<h1 id="equal-numbers"><a href="https://vjudge.net/problem/Gym-101612E">Equal Numbers</a></h1>
<p>这n个数第n-1次操作后全变成他们的最小公倍数
有两种贪心策略：</p>
<ol>
  <li>每次在<strong>未处理的数</strong>中选择出现次数最少的数变成最小公倍数。</li>
  <li>每次在<strong>倍数仍在这组数中的数</strong>中选择出现次数最少的数变成其倍数。  最优方案由以上两种策略产生。由于局部最优的方案不一定整体最优，因此将两种策略并行，每次输出其中最优的方案。
    <pre><code class="language-cpp">#include&lt;fstream&gt;
#include&lt;vector&gt;
#include&lt;algorithm&gt;
using namespace std;
ifstream fin("equal.in");
ofstream fout("equal.out");
vector&lt;int&gt; a,b,d(1e6+1,0);
int n;
int main()
{
 fin&gt;&gt;n;
 for(int i=0,t; i&lt;n; ++i)
 {
     fin&gt;&gt;t;
     ++d[t];
 }
 for(int i=1; i&lt;d.size(); ++i)
     if(d[i])
     {
         a.push_back(d[i]);
         for(int j=2*i; j&lt;d.size(); j+=i)
             if(d[j])
             {
                 b.push_back(d[i]);
                 break;
             }
     }
 sort(a.begin(),a.end());
 sort(b.begin(),b.end());
 for(int i=0,p=0,q=0,sp=0,sq=0; i&lt;=n; ++i)
 {
     while(p&lt;a.size()&amp;&amp;sp+a[p]&lt;=i)
         sp+=a[p++];
     while(q&lt;b.size()&amp;&amp;sq+b[q]&lt;=i)
         sq+=b[q++];
     fout&lt;&lt;a.size()-max(p-1,q)&lt;&lt;' ';
 }
}
</code></pre>
    <h1 id="fygon-20"><a href="https://vjudge.net/problem/Gym-101612F">Fygon 2.0</a></h1>
    <p>dfs。</p>
    <pre><code class="language-cpp">#include&lt;cstdio&gt;
#include&lt;map&gt;
#include&lt;bitset&gt;
typedef long long ll;
typedef std::bitset&lt;32&gt; Bs;
Bs bs[32],t;
void add(char a,char b)
{
 a=(a=='1'?0:a-'a'+1);
 b=(b=='1'?0:b-'a'+1);
 bs[a][b]=1;
 bs[a][a]=1;
 bs[b][b]=1;
}
ll dfs(Bs x)
{
 static std::map&lt;ll,ll&gt; f;
 if(f.find(x.to_ulong())!=f.end())
     return f[x.to_ulong()];
 ll &amp;ret=f[x.to_ulong()]=x.none();
 for(int i=0; i&lt;32; ++i)
     if((x&amp;bs[i])==(1&lt;&lt;i))
     {
         x[i]=0;
         ret+=dfs(x);
         x[i]=1;
     }
 return ret;
}
ll gcd(ll a,ll b)
{
 return b?gcd(b,a%b):a;
}
int main()
{
 freopen("fygon20.in","r",stdin);
 freopen("fygon20.out","w",stdout);
 int m;
 scanf("%d",&amp;m);
 for(char a,b,c; m--;)
 {
     scanf(" for %c in range(%c, %c):",&amp;a,&amp;b,&amp;c);
     add(b,a);
     add(a,c);
 }
 add('1','n');
 for(int i=0; i&lt;32; ++i)
     for(int j=0; j&lt;32; ++j)
         if(bs[j][i])
             bs[j]|=bs[i];
 for(int i=0; i&lt;32; ++i)
 {
     if(bs[i].none())
         t[i]=1;
     for(int j=i+1; j&lt;32; ++j)
         if(bs[i]==bs[j])
             t[j]=1;
 }
 ll an=dfs(t.flip()),ad=1,ag;
 for(int i=2; i&lt;t.count()-1; ++i)ad*=i;
 ag=gcd(an,ad);
 printf("%d %lld/%lld",t.count()-2,an/ag,ad/ag);
}
</code></pre>
    <h1 id="intelligence-in-perpendicularia"><a href="https://vjudge.net/problem/Gym-101612I">Intelligence in Perpendicularia</a></h1>
    <p>求多边形多边形内部可以看到，但在外部看不到的线条长度。 <br />
只要拿总周长减去最小外接矩形周长即可。</p>
    <pre><code class="language-cpp">#include&lt;fstream&gt;
using namespace std;
ifstream fin("intel.in");
ofstream fout("intel.out");
int n,ans=0,x[1024],y[1024];
int abs(int n)
{
 return n&lt;0?-n:n;
}
int main()
{
 fin&gt;&gt;n;
 x[1023]=y[1023]=-1e7;
 x[1022]=y[1022]=1e7;
 for(int i=0; i!=n; ++i)
 {
     fin&gt;&gt;x[i]&gt;&gt;y[i];
     x[1023]=max(x[1023],x[i]);
     y[1023]=max(y[1023],y[i]);
     x[1022]=min(x[1022],x[i]);
     y[1022]=min(y[1022],y[i]);
 }
 for(int i=0; i!=n; ++i)
     ans+=abs(x[(i+1)%n]+y[(i+1)%n]-x[i]-y[i]);
 fout&lt;&lt;ans-2*(x[1023]+y[1023]-x[1022]-y[1022]);
}
</code></pre>
    <h1 id="kotlin-island"><a href="https://vjudge.net/problem/Gym-101612K">Kotlin Island</a></h1>
    <p>样例是骗人的。例如，第二个样例其实不做任何处理就行。 <br />
其次，只要处理奇数行和奇数列（编号从0开始）即可。 <br />
<code>f[i][j]</code> 表示将前i个奇数行和j个奇数列被充水后剩下的联通块数量，容易列出转移方程。转移的时候如果发现 <code>f[i][j]==n</code> 就可以输出了。</p>
    <pre><code class="language-cpp">#include&lt;fstream&gt;
using namespace std;
ifstream fin("kotlin.in");
ofstream fout("kotlin.out");
int h,w,n,f[64][64]= {1,0};
int main()
{
 fin&gt;&gt;h&gt;&gt;w&gt;&gt;n;
 for(int i=0; 2*i&lt;h; ++i)
     for(int j=0; 2*j&lt;w; ++j)
     {
         if(i)f[i][j]=max(f[i][j],f[i-1][j]+j+1);
         if(j)f[i][j]=max(f[i][j],f[i][j-1]+i+1);
         if(f[i][j]==n)
         {
             for(int x=0; x&lt;h; ++x,fout&lt;&lt;'\n')
                 for(int y=0; y&lt;w; ++y)
                     fout&lt;&lt;((x%2&amp;&amp;x/2&lt;i)||
                            (y%2&amp;&amp;y/2&lt;j)?
                            '#':'.');
             return 0;
         }
     }
 fout&lt;&lt;"Impossible";
}
</code></pre>
  </li>
</ol>
:ET