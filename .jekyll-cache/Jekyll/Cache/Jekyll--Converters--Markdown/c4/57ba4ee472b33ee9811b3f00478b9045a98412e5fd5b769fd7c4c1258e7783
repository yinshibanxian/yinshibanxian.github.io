I"
<h4 id="一题目描述">一、题目描述</h4>

<p>输入两棵二叉树A和B，判断B是不是A的子结构。(约定空树不是任意一个树的子结构)</p>

<p>B是A的子结构， 即 A中有出现和B相同的结构和节点值。</p>

<p>例如:
给定的树 A:</p>
<pre><code>     3
    / \
   4   5
  / \
 1   2
</code></pre>

<p>给定的树B:</p>
<pre><code>   4 
  /
 1
</code></pre>
<p>返回 true，因为 B 与 A 的一个子树拥有相同的结构和节点值。</p>

<p><strong>示例1</strong></p>

<pre><code>输入：A = [1,2,3], B = [3,1]
输出：false
</code></pre>

<p><strong>示例2</strong></p>

<pre><code>输入：A = [3,4,5,1,2], B = [4,1]
输出：true
</code></pre>

<p><strong>限制</strong></p>

<pre><code>0 &lt;= 节点个数 &lt;= 10000
</code></pre>

<h4 id="二题目解析">二、题目解析</h4>

<p>若树B是树A的子结构，则子结构的根节点可能是树A的任意一个节点。因此，要判断树B是否为树A的子结构，需要完成以下两步操作:</p>

<ul>
  <li>先序遍历树A中的每个节点a(对应于函数isSubStructure(A, B))</li>
  <li>判断树A中以a为根节点的子树是否包含树B(对应于函数recusive(A,B))</li>
</ul>

<p><code>recusive(A,B)</code>函数</p>

<ul>
  <li>终止递归条件:
    <ul>
      <li>当节点B为空，说明树B已匹配完毕（越过叶子节点），返回<code>true</code></li>
      <li>当节点A为空，说明已经越过树A叶子节点，即匹配失败，返回<code>false</code></li>
      <li>当节点A和节点B的值不同，则匹配失败，返回<code>false</code></li>
    </ul>
  </li>
  <li>返回值
    <ul>
      <li>判断A和B的左节点是否相等，即<code>recusive(A.left,B.left)</code></li>
      <li>判断A和B的右节点是否相等,即<code>recusive(A.right,B.right)</code></li>
    </ul>
  </li>
</ul>

<p><code>isSubStructure(A,B)</code>函数</p>

<ul>
  <li>特例判断: 当 树 A 为空 或 树 B 为空 时，直接返回 <code>false</code></li>
  <li>
    <table>
      <tbody>
        <tr>
          <td>返回值: 当树 B是树 A 的子结构，则必满足以下三种情况之一，因此用或</td>
          <td> </td>
          <td>连接；</td>
        </tr>
      </tbody>
    </table>
    <ul>
      <li>以节点A为根节点的子树包含</li>
    </ul>
  </li>
</ul>

<p>来源：力扣（LeetCode）</p>

<p>链接：https://leetcode-cn.com/problems/shu-de-zi-jie-gou-lcof
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
:ET