I"+<pre><code class="language-haskell">module Newton_Raphson where
squareroot2 :: Float -&gt; Integer -&gt; Float
squareroot2 x0 n=squareroot 2 x0 n

squareroot :: Float -&gt; Float -&gt; Integer -&gt; Float
squareroot r x0 0=x0
squareroot r x0 n=(x+r/x)/2 where x=squareroot r x0 (n-1)

sqrtSeq :: Float -&gt; Float -&gt; [Float]
sqrtSeq r x0=x0:sqrtSeq r (squareroot r x0 1)

squareroot' :: Float -&gt; Float -&gt; Float -&gt; Float
squareroot' r x0 eps=f (sqrtSeq r x0) eps where f (y:ys) eps=if abs((head ys)-y)&lt;eps then y else f ys eps
</code></pre>
:ET