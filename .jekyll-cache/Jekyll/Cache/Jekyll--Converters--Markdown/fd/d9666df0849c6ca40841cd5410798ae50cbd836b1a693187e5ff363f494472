I"t%<h2 id="实验题目">实验题目</h2>

<p>加载用户程序的监控程序</p>

<h2 id="实验目的">实验目的</h2>

<ul>
  <li>掌握常用的 BIOS 调用</li>
  <li>掌握 BIOS 编程</li>
  <li>掌握加载用户程序的方法</li>
</ul>

<h2 id="实验要求">实验要求</h2>

<ul>
  <li>设计四个有输出的用户可执行程序，分别在屏幕1/4区域动态输出字符，如将用字符‘A’从屏幕左边某行位置45度角下斜射出，保持一个可观察的适当速度直线运动，碰到屏幕相应1/4区域的边后产生反射，改变方向运动，如此类推，不断运动；在此基础上，增加你的个性扩展，如同时控制两个运动的轨迹，或炫酷动态变色，个性画面，如此等等，自由不限。还要在屏幕某个区域特别的方式显示你的学号姓名等个人信息。</li>
  <li>修改参考原型代码，允许键盘输入，用于指定运行这四个有输出的用户可执行程序之一，要确保系统执行代码不超过512字节，以便放在引导扇区</li>
  <li>自行组织映像盘的空间存放四个用户可执行程序。</li>
</ul>

<h2 id="实验方案">实验方案</h2>

<h3 id="实验环境">实验环境</h3>

<h4 id="软件">软件</h4>

<ul>
  <li>Windows 10, 64-bit  (Build 17763) 10.0.17763</li>
  <li>Windows Subsystem for Linux [Ubuntu 18.04.2 LTS]：WSL是以软件的形式运行在Windows下的Linux子系统，是近些年微软推出来的新工具，可以在Windows系统上原生运行Linux。</li>
  <li>gcc version 7.3.0 (Ubuntu 7.3.0-27ubuntu1~18.04)：C语言程序编译器，Ubuntu自带。</li>
  <li>NASM version 2.13.02：汇编程序编译器，通过<code>sudo apt install nasm</code>安装在WSL上。</li>
  <li>Oracle VM VirtualBox 6.0.4 r128413 (Qt5.6.2)：轻量开源的虚拟机软件。</li>
  <li>VSCode - Insiders v1.33.0：好用的文本编辑器，有丰富的插件。</li>
  <li>hexdump for VSCode 1.7.2: VSCode中一个好用的十六进制显示插件。</li>
</ul>

<p>大部分开发环境安装在WSL上，较之于双系统、虚拟机等其他开发方案，更加方便，也方便直接使用Linux下的一些指令。</p>

<h4 id="硬件">硬件</h4>

<h5 id="开发环境配置">开发环境配置</h5>

<p>所用机器型号为VAIO Z Flip 2016</p>

<ul>
  <li>Intel(R) Core(TM) i7-6567U CPU @3.30GHZ 3.31GHz</li>
  <li>8.00GB RAM</li>
</ul>

<h5 id="虚拟机配置">虚拟机配置</h5>

<ul>
  <li>处理器内核总数：1</li>
  <li>RAM：4MB</li>
</ul>

<h3 id="实验原理">实验原理</h3>

<p>与<a href="https://wu-kan.github.io/操作系统/裸机控制权与引导程序">前一个实验</a>差不多。</p>

<ol>
  <li>虚拟软盘的第一个扇区用于存储主引导程序（即监控程序），需要保证最后两个字节为<code>55aa</code>。验证主引导程序有效后，跳转到<code>7c00h</code>开始执行。</li>
  <li>引导程序接受键盘输入，选择程序，随后从软盘加载指定程序扇区的内容到内存并跳转执行。</li>
  <li>中断标号<code>0x00</code>到<code>0x13</code>已经具有功能，<code>0x14</code>到<code>0x1f</code>为保留标号，<code>0x20</code>到<code>0xff</code>提供给用户自定义中断。因此定义<code>0x20h</code>号中断用于从用户程序返回监控程序。</li>
  <li>在用户程序的循环中需要加入软件中断<code>int 20h</code>，用于监测是否有键盘返回，如果有则返回监控程序，否则继续执行。</li>
</ol>

<h2 id="实验过程">实验过程</h2>

<h3 id="aasm">a.asm</h3>

<p>本次实验要求写 4 个用户程序，分别是在屏幕的4个象限中弹来弹去。四个代码的程序几乎相同，只需要修改某些常量和变量的定义即可。这里只给出其中一个程序的代码。</p>

<p>另外，本想直接用<a href="https://wu-kan.github.io/操作系统/裸机控制权与引导程序">前一个实验</a>的<code>c.asm</code>，却发现老师只考虑了边反射的情况，没有考虑四个角反射的情况，这会导致显示的内容从角飞出，在屏幕中乱飞。于是再次重构这段代码，使得编译后大小仅137bytes：</p>

<ul>
  <li>加载地址修改成<code>org 0A100h</code>，表明用户程序读入内存应从内存物理地址0A100h开始。</li>
  <li>重新修改横纵坐标的变化方式，改为根据运行周期自动变化。</li>
  <li>修改字符串显示方式，改为调用<code>int 10h</code>实现，并写了一个<code>%macro print</code>来简化这一过程（造轮子）,仍然支持根据行号自动变色。</li>
  <li>屏幕显示空出前两行，用于显示引导程序的提示信息。</li>
</ul>

<pre><code class="language-nasm">%macro print 4	; string, length, x, y
	mov ax, cs
	mov ds, ax
	mov bp, %1
	mov ax, ds
	mov es, ax
	mov cx, %2
	mov ah, 13h
	mov al, 00h
	mov bh, 00h
	mov bl, %3	; 根据行号自动变色
	mov dh, %3
	mov dl, %4
	int 10h
%endmacro

	N equ 12	;显示区域高度
	M equ 32	;显示区域宽度减去字符串长度
	TOP equ 2	;显示区域上端点
	LEFT equ 40	;显示区域左端点
	LENGTH equ 8	;字符串的长度
	DELAY equ 99999999
	org 0A100h
	mov ax,0B800h
	mov gs,ax	; GS = 0xB800h，文本窗口显存起始地址

myLoop:
	dec dword[count]	; 递减计数变量
	jnz myLoop	; &gt;0：跳转
	mov dword[count], DELAY

	mov word ax, [t]	; ax = t
	mov word bx,2*N-2
	xor dx, dx	; clear dx and prepare for division
	div bx  ; dx = t mod (2N - 2)
	cmp dx, N ; compare dx and n
	jb xok  ; if (dx &lt; n) jump xok
	sub bx, dx
	mov dx, bx ; dx = 2n - 2 - dx
xok:
	mov word[x], dx
	add word[x], TOP

	mov word ax, [t]
	mov word bx, 2*M-2
	xor dx, dx
	div bx
	cmp dx, M
	jb yok
	sub bx, dx
	mov dx, bx
yok:
	mov word [y],dx
	add word [y],LEFT

	inc word[t]
	print message, LENGTH, [x], [y]
	int 20h
	jmp myLoop
datadef:
	count dd 1
	t dw 0
	x dw 1
	y dw 0
	message db ' wu-kan '
</code></pre>

<h3 id="wukosasm">wukos.asm</h3>

<p>引导扇区的 bootloader，其功能有：</p>

<ul>
  <li>显示正在运行的是哪一个程序，或是选择页面提示语。</li>
  <li>使用<code>int 13h</code>读取扇区，并把它放到内存合适的位置上。</li>
  <li>使用<code>int 16h</code>读取键盘输入，用于选择程序。</li>
</ul>

<p>这里遇到一个问题，就是直接使用上面自动变色的程序时没有显示。因前两行的x坐标恰好对应了颜色中的黑底黑字。因此修改显示颜色<code>mov bl, 07h</code>（黑底白字）即可。</p>

<pre><code class="language-nasm">OffSetOfUserPrg equ 0A100h
org  7c00h
%macro print 4	; string, length, x, y
	mov ax, cs
	mov ds, ax
	mov bp, %1
	mov ax, ds
	mov es, ax
	mov cx, %2
	mov ah, 13h
	mov al, 00h
	mov bh, 00h
	mov bl, 07h	; 黑底白字
	mov dh, %3
	mov dl, %4
	int 10h
%endmacro

mov ax, 0000h
mov es, ax
mov ax, 20h
mov bx, 4
mul bx
mov si, ax
mov ax, _int20h
mov [es:si], ax
add si, 2
mov ax, cs
mov [es:si], ax
begin:
	call cls
	print msg, msglen, 0, 0
input:
	mov ah, 0
	int 16h
	cmp al, '1'
	jl input
	cmp al, '4'
	jg input
	mov [sectorNum], al
	call cls
	print msg1, msglen1, 0, 0
	print sectorNum, 1, 0, 16

	mov cl, [sectorNum]
	sub cl, '0'-1  ;从第二个扇区开始
	mov ax, cs
	mov es, ax
	mov ah, 2
	mov al, 1
	mov dl, 0
	mov dh, 0
	mov ch, 0
	mov bx, OffSetOfUserPrg
	int 13H
	jmp OffSetOfUserPrg
cls:
	mov ax, 0B800h
	mov es, ax
	mov si, 0
	mov cx, 80*25
	mov dx, 0
	clsLoop:
		mov [es:si], dx
		add si, 2
	loop clsLoop
	ret
int20h:
	mov ah, 01h
	int 16h
	jz noclick
	mov ah, 00h
	int 16h
	cmp ax, 2e03h	; 检测Ctrl + C
	jne noclick
	jmp begin
noclick:
	iret
datadef:
	msg db 'Welcome to WuKOS, press 1~4 to run a program.'
	msglen equ ($-msg)
	msg1 db 'This is program 0, press Ctrl + C to return.'
	msglen1 equ ($-msg1)
	sectorNum db '1'
</code></pre>

<h3 id="编译烧盘">编译烧盘</h3>

<p>在WSL终端下按顺序执行下述指令。主引导程序存储在虚拟软盘的第一个扇区，第一个用户程序存储在第二个扇区，第二个用户程序存储在第三个扇区，以此类推。</p>

<pre><code class="language-bash">nasm wukos.asm -o wukos.com
nasm a.asm -o a.com
nasm b.asm -o b.com
nasm c.asm -o c.com
nasm d.asm -o d.com
/sbin/mkfs.msdos -C wukos.img 1440
dd if=wukos.com of=wukos.img conv=notrunc
dd if=a.com of=wukos.img seek=1 conv=notrunc
dd if=b.com of=wukos.img seek=2 conv=notrunc
dd if=c.com of=wukos.img seek=3 conv=notrunc
dd if=d.com of=wukos.img seek=4 conv=notrunc
</code></pre>

<h3 id="运行结果">运行结果</h3>

<h4 id="引导界面">引导界面</h4>

<p><img src="/public/image/2019-03-18-0.jpg" alt="图片描述" /></p>

<h4 id="程序1">程序1</h4>

<p><img src="/public/image/2019-03-18-1.jpg" alt="图片描述" /></p>

<p>显示姓名。</p>

<h4 id="程序2">程序2</h4>

<p><img src="/public/image/2019-03-18-2.jpg" alt="图片描述" /></p>

<p>显示学号。</p>

<h4 id="程序3">程序3</h4>

<p><img src="/public/image/2019-03-18-3.jpg" alt="图片描述" />
显示邮箱。</p>

<h4 id="程序4">程序4</h4>

<p><img src="/public/image/2019-03-18-4.jpg" alt="图片描述" />
显示博客。</p>

<h2 id="实验总结">实验总结</h2>

<p>重写了之前的代码，没有想到本来上次已经很小的290bytes还能压到更小的137bytes…</p>

<p>还遇到了根据行号变色时第一行看不到输出的原因，仔细思考和查阅网上资料后发现00h用于表示不显示，在自动变色行号为0的时候就会导致看不到输出。</p>

<p>现在对<code>org 7c00h</code>等语句有了更深的理解了。</p>
:ET