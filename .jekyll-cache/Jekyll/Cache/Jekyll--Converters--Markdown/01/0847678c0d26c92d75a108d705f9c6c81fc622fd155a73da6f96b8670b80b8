I"E<h2 id="基本概念">基本概念</h2>

<h3 id="域domain">域(domain)</h3>

<p>某个属性的值域. 域具有原子性, 在使用上不可再分. 所有域都含有 null.</p>

<h3 id="关系relation">关系(relation)</h3>

<p>一系列域上的笛卡儿积的子集. 关系的元素为一个元组, 对应表的一行. 一个关系中的元素必定相异.</p>

<h3 id="超码super-key">超码(super key)</h3>

<p>超码是属性的集合. 一个关系的超码可以唯一标识这个关系中的一个元组.</p>

<h4 id="候选码candidate-key">候选码(candidate key)</h4>

<p>如果一个超码的任意真子集都不是超码, 那么这个超码就是候选码. 一个关系的候选码可以有多个.</p>

<h4 id="主码primary-key">主码(primary key)</h4>

<p>一个关系的主码是数据库设计者选择的候选码.</p>

<h4 id="外码foreign-key">外码(foreign key)</h4>

<p>一个关系模式(r1)的属性如果包含另一个关系模式(r2)的主码, 则这个属性叫做 r1 参照 r2 的外码.</p>

<h2 id="关系代数运算">关系代数运算</h2>

<p>关系代数运算是非过程化的. 关系代数运算的输入输出都为关系, 所以关系代数运算可以组合.</p>

<h2 id="基本运算">基本运算</h2>

<h3 id="选择运算">选择运算</h3>

<p>选出满足给定谓词的元组.</p>

<h3 id="投影运算">投影运算</h3>

<p>返回关系的某些属性组成的关系.</p>

<h3 id="更名运算">更名运算</h3>

<p>给一个关系赋名, 也可以给其属性赋名.</p>

<h3 id="并运算">并运算</h3>

<p>返回两个关系的并. 两个关系必须 schema 相同, 即同元(属性数目相同), 相对属性的域也相同.</p>

<h3 id="集合差运算">集合差运算</h3>

<p>返回两个关系的集合差, 两个关系必须像并运算一样相容.</p>

<h3 id="笛卡儿积">笛卡儿积</h3>

<p>将任意两个关系拼接起来, 通过重新命名属性名来避免两个关系的属性名如果相同.</p>

<h2 id="附加运算">附加运算</h2>

<p>在不增加关系代数表达力的情况下, 附加一些运算以简化表达式.</p>
:ET